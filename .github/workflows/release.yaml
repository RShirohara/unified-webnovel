name: Release and Publish

on:
  push:
    branches:
      - main

permissions:
  contents: write
  id-token: write

jobs:
  retrieve_pullrequest_label:
    name: Retrieve pull request label
    runs-on: ubuntu-latest

    outputs:
      labels: ${{ steps.retrieve_label.outputs.result }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Retrieve pull request label
        id: retrieve_label
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          script: |
            const query = `query($owner:String!, $repo:String!, $sha:String!) {
              repository(owner: $owner, name: $repo) {
                object(expression: $sha) {
                  ... on Commit {
                    associatedPullRequests(first:1 ) {
                      nodes {
                        labels(first:100) {
                          nodes{
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            }`;
            const variables = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha
            };
            const queryResult = await github.graphql(query, variables);
            const labels = [
              ...(queryResult.repository.object.associatedPullRequests?.nodes ?? []),
            ]
              .map((node) => {
                return node.labels.nodes.map((node) => {
                  {
                    return node.name;
                  }
                });
              })
              .flat()
              .join(", ");
            return labels;

  retrieve_target:
    name: Retrieve release target
    needs: retrieve_pullrequest_label
    runs-on: ubuntu-latest

    if: ${{ contains( needs.retrieve_pullrequest_label.outputs.labels, 'Release') }}

    outputs:
      packages: ${{ steps.retrieve_packages.outputs.packages }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: latest

      - name: Setup pnpm and install dependencies
        uses: ./.github/actions/setup-pnpm

      - name: Retrieve changed package list
        id: retrieve_packages
        run: |
          set -eux
          PACKAGES=$(
            pnpm run --silent version:check --json \
            | jq -c '.'
          )
          echo "packages=${PACKAGES}" > "${GITHUB_OUTPUT}"

  create_release:
    name: Create release (${{ matrix.name }}@${{ matrix.version }})
    needs: retrieve_target
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.retrieve_target.outputs.packages) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Create tag
        env:
          TAG_PREFIX: "${{ matrix.name }}@${{ matrix.version }}"
        run: |
          git config user.name "${{ vars.RELEASE_USER_NAME }}"
          git config user.email "${{ vars.RELEASE_USER_EMAIL }}"
          git tag "${TAG_PREFIX}" "${{ github.sha }}" -a -m "${TAG_PREFIX}"
          git push origin "${TAG_PREFIX}"

      - name: Extract release notes of the target version
        run: |
          awk '
              (s == 0) && /^## \[?${{ matrix.version }}\]?/ {s=1; print; next}
              (s == 1) && /^## / {s=0; next}
              s == 1 {print}
            ' \
            ${{ matrix.location }}/CHANGELOG.md \
            > ${{ matrix.location }}/CHANGELOG-${{ matrix.version }}.md

      - name: Create release
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2.3.2
        with:
          name: ${{ matrix.name }} v${{ matrix.version }}
          tag_name: ${{ matrix.name }}@${{ matrix.version }}
          body_path: ${{ matrix.location }}/CHANGELOG-${{ matrix.version }}.md

  publish:
    name: Publish packages
    needs: create_release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: latest

      - name: Setup pnpm and install dependencies
        uses: ./.github/actions/setup-pnpm

      - name: Publish packages
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" >> .npmrc
          pnpm run publish --yes
